// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Kullanıcı & Adres
model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String?
  phone        String?
  avatarUrl    String?   // Kullanıcı avatar URL'i
  dateOfBirth  DateTime? // Kullanıcı doğum tarihi
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  addresses    Address[]
  orders       Order[]
  reviews      Review[]
  basketItems  BasketItem[]
}

model Address {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  label     String  // e.g. "Ev", "İş"
  line1     String
  line2     String?
  city      String
  postal    String
  country   String
  phone     String?
  orders    Order[]
}

/// Ürün & Varyant & Kategori
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?      // alt kategoriye izin
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  price       Float
  imageUrl    String?
  createdAt   DateTime    @default(now())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  variants    ProductVariant[]
  reviews     Review[]
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  sku        String   @unique
  attribute  String   // "size", "color", "capacity"…
  value      String   // "M", "red", "128GB"…
  stock      Int      @default(0)
  priceDiff  Float    @default(0) // ana fiyata ek/çıkar
  basketItems BasketItem[]
  orderItems OrderItem[]
}

/// Sipariş & Ürün sipariş detayı
model Order {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id])
  userId       Int
  address      Address?    @relation(fields: [addressId], references: [id])
  addressId    Int?
  status       String      @default("pending")
  total        Float
  createdAt    DateTime    @default(now())
  items        OrderItem[]
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id])
  orderId      Int
  variant      ProductVariant @relation(fields: [variantId], references: [id])
  variantId    Int
  quantity     Int      @default(1)
  unitPrice    Float    // sipariş anındaki fiyat
}

/// Yorum & Puanlama
model Review {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  rating     Int      @default(5)   // 1–5 arası
  title      String?  // Yorum başlığı
  comment    String?
  images     String?  // JSON array of image URLs
  likes      Int      @default(0)
  dislikes   Int      @default(0)
  isVerified Boolean  @default(false) // Sipariş veren kullanıcı
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/// Sepet
model BasketItem {
  id         Int      @id @default(autoincrement())
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  guestId    String?  // Guest token için
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  variantId  Int
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  
  @@index([userId])
  @@index([guestId])
}
